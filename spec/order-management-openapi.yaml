openapi: '3.0.1'

info:
  title: Order management API
  description: The API to manage orders
  version: '@project.version'

paths:
  /products:
    post:
      operationId: createProduct
      tags:
        - Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
      responses:
        200:
          description: Product created

  /products/{productId}:
    get:
      operationId: getProductDetails
      tags:
        - Product
      parameters:
        - in: path
          name: productId
          schema:
            type: string
          required: true
          description: The id of product
      responses:
        200:
          description: Retrieved product details successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        404:
          description: Product details not found
        500:
          description: Unexpected error

  /orders/customer/{customerId}:
    get:
      tags:
        - Order
      operationId: getOrdersByCustomerId
      parameters:
        - in: path
          required: true
          name: customerId
          schema:
            type: string
      responses:
        200:
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDto'
        404:
          description: Order not found

  /orders/{oderId}:
    get:
      tags:
        - Order
      operationId: getOrderById
      parameters:
        - in: path
          required: true
          name: oderId
          schema:
            type: string
      responses:
        200:
          description: All order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'

  /orders:
    post:
      operationId: createOrder
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDto'
      responses:
        200:
          description: Order created

  /customers:
    post:
      tags:
        - Customer
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDto'
      responses:
        200:
          description: Customer created
  /customers/{customerId}:
    get:
      tags:
        - Customer
      operationId: getCusomerOrders
      parameters:
        - in : path
          name: customerId
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDto'
          description: Retrieve all order for a customer

components:
  schemas:

    ProductDto:
      type: object
      properties:
        product_id:
          type: string
        name:
          type: string
        price:
          type: number

    CustomerDto:
      type: object
      properties:
        customer_id:
          type: string
        name:
          type: string

    OrderDto:
      type: object
      properties:
        order_id:
          type: string
        customer_id:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductDto'
